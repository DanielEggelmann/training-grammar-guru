#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Copyright 2016 Eddie Antonio Santos <easantos@ualberta.ca>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from pprint import pprint

from tqdm import tqdm
from blessings import Terminal

from corpus import Corpus

t = Terminal()

first_elements = [
    '/*<unknown>*/', '/*<start>*/', '/*<end>*/'
]


def summarize(vocab):
    """
    >>> summarize({'var', '{', '/*regexp*.'})
    The size of vocabulary is 6
    """
    size = len(vocab) + len(first_elements)

    if size < 96:
        size = t.green(str(size))
    elif 128 <= size < 256:
        size = t.yellow(str(size))
    else:
        size = t.red(str(size))

    print("The size of vocabulary is", size)
    total_vocab = first_elements + sorted(list(vocab)) 

    with open('autogenerated_vocabulary.py', 'wt', encoding='utf-8') as vocab_file:
        vocab_file.write('VOCAB = ')
        pprint(total_vocab, stream=vocab_file)


def singleton(cls):
    return cls()

@singleton
class useful_token:
    def __call__(self, token):
        try:
            fn = getattr(self, token.type)
        except AttributeError:
            raise token
        else:
            return fn(token.value)

    def Boolean(self, text):
        return text

    def Identifier(self, text):
        return '$id'

    def Keyword(self, text):
        return text

    def Null(self, text):
        return 'null'

    def Numeric(self, text):
        return '/*<any-number>*/0'

    def Punctuator(self, text):
        return text

    def String(self, text):
        return '"<any-string">'

    def RegularExpression(self, text):
        return '/<any-regexp>/'

    def Template(self, text):
        """
        This one depends on context, but whatever.
        """
        return '`<any-template-fragment>`'


if __name__ == '__main__':
    import sys
    _, filename = sys.arv
    corpus = Corpus.connect_to(filename)

    vocab = set()

    for file_tokens in tqdm(corpus, total=len(corpus)):
        for token in file_tokens:
            vocab.add(useful_token(token))

    summarize(vocab)
